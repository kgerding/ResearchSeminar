p2016 <- p2016[, colSums(is.na(p2016)/nrow(p2016)) < 0.2]
#missing_values <- p2016 %>% summarize_each(funs(sum(is.na(.))/n()))
#missing_values <- gather(missing_values, key="feature", value="missing_pct")
#good_features <- filter(missing_values, missing_pct < 0.20)
#features <- good_features$feature
#p2016 <- p2016 %>% select(features)
# select hedonics
hedonics <- c('id_parcel','num_bathroom','num_bedroom','area_live_finished',
'flag_tub_or_spa','loc_latitude','loc_longitude','area_lot',
'type_zoning_landuse','loc_zip','loc_county', 'year_built', 'flag_fireplace', 'num_tax_building',
'num_tax_total', 'num_tax_land')
p2016 <- p2016 %>% select(hedonics)
# transform dummies and factors
p2016$flag_tub_or_spa[p2016$flag_tub_or_spa == 'true'] <- 1
p2016$flag_tub_or_spa[p2016$flag_tub_or_spa != '1'] <- 0
p2016$flag_fireplace[p2016$flag_fireplace == 'true'] <- 1
p2016$flag_fireplace[p2016$flag_fireplace != '1'] <- 0
p2016$flag_tub_or_spa <- as.numeric(as.character(p2016$flag_tub_or_spa))
p2016$flag_fireplace <- as.numeric(as.character(p2016$flag_fireplace))
# type id as factor
p2016 <- left_join(p2016, id, by = 'type_zoning_landuse')
p2016 <- p2016[ , -which(names(p2016) %in% c("type_zoning_landuse"))]
p2016$factor <- as.factor(p2016$factor)
# clean house prices
hist(p2016$num_tax_building[p2016$num_tax_building < 500000], breaks = 100)
p2016 <- p2016[p2016$num_tax_total >= 50000,]
# simple regression
hedonic <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + year_built + flag_fireplace, data = p2016)
summary(hedonic)
#plot
ggplot(data = p2016, aes(x = num_bedroom, y = num_tax_total)) +
geom_point()
View(p2016)
# filter beds
nobeds <- filter(p2016, num_bedroom == 0)
summary(nobeds)
nrow(nobeds)/nrow(p2016)
# filter baths
nobaths <- filter(p2016, num_bathroom == 0)
summary(nobeds)
nrow(nobaths)/nrow(p2016)
summary(nobeds)
# filter baths
nobaths <- filter(p2016, num_bathroom == 0 & num_bedroom == 0)
nrow(nobaths)/nrow(p2016)
p2016 <- prices2016 %>% rename(
id_parcel = parcelid,
year_built = yearbuilt,
area_basement = basementsqft,
area_patio = yardbuildingsqft17,
area_shed = yardbuildingsqft26,
area_pool = poolsizesum,
area_lot = lotsizesquarefeet,
area_garage = garagetotalsqft,
area_firstfloor_finished = finishedfloor1squarefeet,
area_total_calc = calculatedfinishedsquarefeet,
area_base = finishedsquarefeet6,
area_live_finished = finishedsquarefeet12,
area_liveperi_finished = finishedsquarefeet13,
area_total_finished = finishedsquarefeet15,
area_unknown = finishedsquarefeet50,
num_unit = unitcnt,
num_story = numberofstories,
num_room = roomcnt,
num_bathroom = bathroomcnt,
num_bedroom = bedroomcnt,
num_bathroom_calc = calculatedbathnbr,
num_bath = fullbathcnt,
num_75_bath = threequarterbathnbr,
num_fireplace = fireplacecnt,
num_pool = poolcnt,
num_garage = garagecarcnt,
num_tax_total = taxvaluedollarcnt,
num_tax_building = structuretaxvaluedollarcnt,
num_tax_land = landtaxvaluedollarcnt,
num_tax_property = taxamount,
tax_assess_year = assessmentyear,
tax_delinquency_flag = taxdelinquencyflag,
tax_delinquency_year = taxdelinquencyyear,
loc_county = regionidcounty,
loc_city = regionidcity,
loc_zip = regionidzip,
loc_neighbor = regionidneighborhood,
loc_fips = fips,
loc_tract_block = censustractandblock,
loc_raw_tract_block = rawcensustractandblock,
loc_longitude = longitude,
loc_latitude = latitude,
flag_fireplace = fireplaceflag,
flag_tub_or_spa = hashottuborspa,
flag_spa_or_tub_pool = pooltypeid2,
flag_no_tub = pooltypeid7,
flag_spa_or_tub = pooltypeid10,
type_desc_zoning_landuse = propertyzoningdesc,
type_zoning_landuse = propertylandusetypeid,
type_zoning_landuse_county = propertycountylandusecode,
type_quality = buildingqualitytypeid,
type_framing = buildingclasstypeid,
type_material = typeconstructiontypeid,
type_deck = decktypeid,
type_story = storytypeid,
type_heating = heatingorsystemtypeid,
type_ac = airconditioningtypeid,
type_architect = architecturalstyletypeid
)
colnames(id) <- c('type_zoning_landuse', 'factor')
# Step 1: Eliminate columns with more than 20% NAs
# # quick plot
# count_nas <- colSums(is.na(p2016))/nrow(p2016)
# sorted <- rev(sort(count_nas))
# barplot(sorted, cex.names = 0.5, las = 2)
# abline(v=35, col="red")
#delete columns
p2016 <- p2016[, colSums(is.na(p2016)/nrow(p2016)) < 0.2]
#missing_values <- p2016 %>% summarize_each(funs(sum(is.na(.))/n()))
#missing_values <- gather(missing_values, key="feature", value="missing_pct")
#good_features <- filter(missing_values, missing_pct < 0.20)
#features <- good_features$feature
#p2016 <- p2016 %>% select(features)
# select hedonics
hedonics <- c('id_parcel','num_bathroom','num_bedroom','area_live_finished',
'flag_tub_or_spa','loc_latitude','loc_longitude','area_lot',
'type_zoning_landuse','loc_zip','loc_county', 'year_built', 'flag_fireplace', 'num_tax_building',
'num_tax_total', 'num_tax_land')
p2016 <- p2016 %>% select(hedonics)
# transform dummies and factors
p2016$flag_tub_or_spa[p2016$flag_tub_or_spa == 'true'] <- 1
p2016$flag_tub_or_spa[p2016$flag_tub_or_spa != '1'] <- 0
p2016$flag_fireplace[p2016$flag_fireplace == 'true'] <- 1
p2016$flag_fireplace[p2016$flag_fireplace != '1'] <- 0
p2016$flag_tub_or_spa <- as.numeric(as.character(p2016$flag_tub_or_spa))
p2016$flag_fireplace <- as.numeric(as.character(p2016$flag_fireplace))
# type id as factor
p2016 <- left_join(p2016, id, by = 'type_zoning_landuse')
p2016 <- p2016[ , -which(names(p2016) %in% c("type_zoning_landuse"))]
p2016$factor <- as.factor(p2016$factor)
# filter no baths and no bedrooms, we aim to separate properties with buildings and properties without buildings
nobaths <- filter(p2016, num_bathroom == 0 & num_bedroom == 0)
nrow(nobaths)/nrow(p2016)
summary(nobeds)
# drop no baths and no bedrooms
p2016 <- filter(p2016, num_bathroom != 0 & num_bedroom != 0)
#plot
ggplot(data = p2016[1:10000,], aes(x = num_bedroom, y = num_tax_total)) +
geom_point()
#plot
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = num_tax_total)) +
geom_point()
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = log(num_tax_total))) +
geom_point()
#plot
ggplot(data = p2016[1:500000,], aes(x = num_bedroom, y = log(num_tax_total))) +
geom_point()
# filter no baths and no bedrooms, we aim to separate properties with buildings and properties without buildings
nobathsorbeds <- filter(p2016, num_bathroom == 0 & num_bedroom == 0)
nrow(nobathsorbeds)/nrow(p2016)
summary(nobathsorbeds) # conclusion: low building structure values when we have no bathrooms or bedrooms, these are large properties without buildings
# filter no baths and no bedrooms, we aim to separate properties with buildings and properties without buildings
nobathsorbeds <- filter(p2016, num_bathroom == 0 & num_bedroom == 0)
nrow(nobathsorbeds)/nrow(p2016)
# drop no baths and no bedrooms
p2016 <- filter(p2016, num_bathroom != 0 & num_bedroom != 0)
# clean house prices
hist(p2016$num_tax_building[p2016$num_tax_building < 500000], breaks = 100)
# drop building values below 50'000
hist(p2016$num_tax_building[p2016$num_tax_building < 500000], breaks = 100)
p2016 <- p2016[p2016$num_tax_total >= 50000,]
p2016 <- p2016[p2016$num_bedroom >= 0,]
p2016 <- p2016[p2016$num_bathroom >= 0,]
# simple regression
hedonic <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + year_built + flag_fireplace, data = p2016)
summary(hedonic)
#plot bedroom vs tax
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = log(num_tax_building))) +
geom_point()
#plot bedroom vs tax
ggplot(data = p2016[1:100000,], aes(x = num_bathroom, y = log(num_tax_building))) +
geom_point()
# plot size vs tax
ggplot(data = p2016[1:100000,], aes(x = area_live_finished, y = log(num_tax_building))) +
geom_point()
ggplot(data = p2016[1:100000,], aes(x = area_live_finished, y = (num_tax_building))) +
geom_point()
# plot year vs tax
ggplot(data = p2016[1:100000,], aes(x = year_built, y = (num_tax_building))) +
geom_point()
# plot size vs tax
ggplot(data = p2016[1:100000,], aes(x = area_live_finished, y = (num_tax_building))) +
geom_point()
2021 - p2016$yearbuilt
p2016$yearbuilt
2021 - p2016$year_built
p2016$age <- 2021 - p2016$year_built
hedonic <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace, data = p2016)
summary(hedonic)
p2016
hedonic <- lm(num_tax_total ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + year_built + flag_fireplace + factor, data = p2016)
summary(hedonic)
hedonic <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace, data = p2016)
summary(hedonic)
# plot bedroom vs tax
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = log(num_tax_building))) +
geom_point()
# plot bedroom vs tax
ggplot(data = p2016[1:100000,], aes(x = num_bathroom, y = log(num_tax_building))) +
geom_point()
# plot size vs tax
ggplot(data = p2016[1:100000,], aes(x = area_live_finished, y = (num_tax_building))) +
geom_point()
# plot age vs tax
ggplot(data = p2016[1:100000,], aes(x = age, y = (num_tax_building))) +
geom_point()
filter(p2016, area_live_finished > 90000)
ggplot(data = p2016, aes(x = area_live_finished, y = (num_tax_building))) +
geom_point()
# plot size vs tax
ggplot(data = p2016, aes(x = area_live_finished, y = (num_tax_building))) +
geom_point() +
geom_smooth()
# we need to filter the outlier of high area_live finished:
p2016 <- filter(p2016, area_live_finished < 58000)
ggplot(data = p2016[1:100000,], aes(x = area_live_finished, y = (num_tax_building))) +
geom_point()
ggplot(data = p2016, aes(x = num_bathroom, y = log(num_tax_building))) +
geom_point()
ggplot(data = p2016, aes(x = num_bedroom, y = log(num_tax_building))) +
geom_point()
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = log(num_tax_building))) +
geom_point()
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = log(num_tax_building))) +
geom_hist()
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = log(num_tax_building))) +
geom_histogramm()
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = log(num_tax_building))) +
geom_histogram()
ggplot(data = p2016[1:100000,], aes(x = num_bedroom)) +
geom_histogram()
ggplot(data = p2016[1:100000,], aes(x = num_bedroom, y = log(num_tax_building))) +
geom_point()
# plot size vs tax
ggplot(data = p2016[1:100000,], aes(x = area_live_finished, y = (num_tax_building))) +
geom_point()
# we need to filter the outlier of high area_live finished:
p2016 <- filter(p2016, area_live_finished < 58000)
ggplot(data = p2016[1:100000,], aes(x = area_live_finished, y = (num_tax_building))) +
geom_point()
# plot age vs tax
ggplot(data = p2016[1:100000,], aes(x = age, y = (num_tax_building))) +
geom_point()
ggplot(data = p2016[1:100000,], aes(x = num_bedroom)) +
geom_histogram()
ggplot(data = p2016[1:100000,], aes(x = area_lot, y = (num_tax_building))) +
geom_point()
# plot area_lot vs tax
ggplot(data = p2016[1:1000000,], aes(x = area_lot, y = (num_tax_building))) +
geom_point()
ggplot(data = p2016, aes(x = area_lot, y = (num_tax_building))) +
geom_point()
# we need to filter the outlier of high area_lot but very low building structure value
p2016 <- filter(p2016, area_lot < 1e8)
# plot bedroom vs tax
ggplot(data = p2016, aes(x = num_bedroom, y = log(num_tax_building))) +
geom_point()
# plot bedroom vs tax
ggplot(data = p2016, aes(x = num_bathroom, y = log(num_tax_building))) +
geom_point()
# plot size vs tax
ggplot(data = p2016[1:100000,], aes(x = area_live_finished, y = (num_tax_building))) +
geom_point()
# plot age vs tax
ggplot(data = p2016[1:100000,], aes(x = age, y = (num_tax_building))) +
geom_point()
# plot area_lot vs tax
ggplot(data = p2016, aes(x = area_lot, y = (num_tax_building))) +
geom_point()
# plot age vs tax
ggplot(data = p2016[1:100000,], aes(x = age, y = (log(num_tax_building))) +
# plot age vs tax
ggplot(data = p2016[1:100000,], aes(x = age, y = (log(num_tax_building))) +
p2016 <- filter(p2016, area_lot < 1e7)
# plot area_lot vs tax
ggplot(data = p2016, aes(x = area_lot, y = (num_tax_building))) +
geom_point()
# plot area_lot vs tax
ggplot(data = p2016, aes(x = area_lot, y = (num_tax_building))) +
geom_point()
# we need to filter the outlier of high area_lot but very low building structure value
p2016 <- filter(p2016, area_lot < 1e7)
# plot area_lot vs tax
ggplot(data = p2016[1:100000,], aes(x = area_lot, y = (num_tax_building))) +
geom_point()
ggplot(data = p2016[1:100000,], aes(x = age, y = (log(num_tax_building)))) +
geom_point()
# plot area_lot vs tax
ggplot(data = p2016, aes(x = area_lot, y = (num_tax_building))) +
geom_point()
## Step 6: Remove NAs -------------------------------
ommited_na <- na.omit(p2016)
## Step 6: Remove NAs -------------------------------
p2016 <- na.omit(p2016)
# simple regression
hedonic <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace, data = p2016)
summary(hedonic)
hedonic <- lm(log(num_tax_building) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace, data = p2016)
summary(hedonic)
hedonic_total <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace, data = p2016)
summary(hedonic_total)
hedonic_total <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace + num_tax_land, data = p2016)
summary(hedonic_total)
hedonic_total <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace, data = p2016)
summary(hedonic_total)
hedonic_build <- lm(log(num_tax_building) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace, data = p2016)
summary(hedonic_build)
remove(hedonic)
hedonic_total_fact <- lm(num_tax_total ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + year_built + flag_fireplace + factor, data = p2016)
summary(hedonic_total_fact)
# lm of building value with factors
hedonic_total_fact <- lm(log(num_tax_total) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + year_built + flag_fireplace + factor, data = p2016)
summary(hedonic_total_fact)
summary(hedonic_total)
hedonic_build <- lm(log(num_tax_building) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace, data = p2016)
summary(hedonic_build)
hedonic_total_fact <- lm(log(num_tax_building) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + year_built + flag_fireplace + factor, data = p2016)
summary(hedonic_total_fact)
plot(prices2016[1:100000,roomcnt])
plot(prices2016[1:100000,'roomcnt'])
hist(prices2016[1:100000,'roomcnt'], breaks 100)
hist(prices2016[1:100000,'roomcnt'], breaks = 100)
View(prices2016)
summary(prices2016$roomcnt)
nrow(prices2016$roomcnt == 0)
sum(prices2016$roomcnt == 0)
sum(prices2016['roomcnt' == 0])
sum(na.omit(prices2016)['roomcnt' == 0])
sum(prices2016[prices2016$roomcnt == 0], na.rm = TRUE)
sum(prices2016$roomcnt[prices2016$roomcnt == 0], na.rm = TRUE)
nrow(prices2016$roomcnt[prices2016$roomcnt == 0])
nrow(prices2016[prices2016$roomcnt == 0])
nrow(prices2016[prices2016$roomcnt == 0,])
summary(prices2016$taxdelinquencyyear)
## set the seed to make your partition reproducible
set.seed(123)
## Advanced Algorithms --------------------------------
library(xgboost)
install.packages('xgboost')
## Advanced Algorithms --------------------------------
library(xgboost)
data(train16, package='xgboost')
## Step 3.1: Adding new features -------------------
p2016$prop_living <- p2016$area_live_finished/p2016$area_lot
# proportion of building to land value
p2016$prop_living <- p2016$num_tax_building/p2016$num_tax_land
hedonic_build <- lm(log(num_tax_building) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace + prop_living, data = p2016)
summary(hedonic_build)
## Step 3.1: Adding new features -------------------
# proportion of living area to area lot
p2016$prop_living <- p2016$area_live_finished/p2016$area_lot
# proportion of building to land value
p2016$build_land_prop <- p2016$num_tax_building/p2016$num_tax_land
hedonic_build <- lm(log(num_tax_building) ~ num_bathroom + num_bedroom + area_live_finished +
flag_tub_or_spa + area_lot + age + flag_fireplace + prop_living + build_land_prop, data = p2016)
summary(hedonic_build)
str(p2016)
sparse_matrix <- sparse.model.matrix(Improved~.-1, data = train16)
library(matrix)
install.packages('matrix')
install.packages('Matrix')
## Advanced Algorithms --------------------------------
library(xgboost)
library(matrix)
library(Matrix)
# separate training and testing data
smp_size <- floor(0.75 * nrow(p2016)) ## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(p2016)), size = smp_size)
train16 <- p2016[train_ind, ]
test16 <- p2016[-train_ind, ]
sparse_matrix <- sparse.model.matrix(Improved~.-1, data = train16)
View(train16)
train16 <- p2016[train_ind, -c('id_parcel, loc_latitude', 'loc_longitude')]
train16 <- p2016[train_ind, c('id_parcel, loc_latitude', 'loc_longitude')]
train16 <- train16 %>% select(c('id_parcel', 'loc_latitude', 'loc_longitude'))
library(tidyverse)
library(data.table)
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library(ggplot2)
library(spdep)
library(dplyr)
train16 <- p2016[train_ind]
train16 <- p2016[train_ind,]
train16 <- train16 %>% select(c('id_parcel', 'loc_latitude', 'loc_longitude'))
train16 <- p2016[train_ind,]
train16 <- train16 %>% select(-c('id_parcel', 'loc_latitude', 'loc_longitude'))
train16 <- train16 %>% select(-c('id_parcel', 'loc_latitude', 'loc_longitude', 'loc_zip', 'loc_county', 'year_built'))
# featues we want to omit for the model
omit <- c('id_parcel', 'loc_latitude', 'loc_longitude', 'loc_zip', 'loc_county', 'year_built')
train16 <- train16 %>% select(-omit)
# split the data
train16 <- p2016[train_ind,]
train16 <- train16 %>% select(-omit)
test16 <- p2016[-train_ind, ]
test16 <- test16 %>% select(-omit)
# featues we want to omit for the model
omit <- c('id_parcel', 'loc_latitude', 'loc_longitude', 'loc_zip', 'loc_county', 'year_built', 'num_tax_building', 'num_tax_land')
# split the data
train16 <- p2016[train_ind,]
train16 <- train16 %>% select(-omit)
test16 <- p2016[-train_ind, ]
test16 <- test16 %>% select(-omit)
sparse_matrix <- sparse.model.matrix(num_tax_total~.-1, data = train16)
head(sparse_matrix)
?xgboost
sparse_matrix <- sparse.model.matrix(num_tax_total~.-1, data = train16)
head(sparse_matrix)
View(sparse_matrix)
bst <- xgboost(data = sparse_matrix, label = output_vector, max.depth = 4,
eta = 1, nthread = 2, nrounds = 10,objective = "binary:logistic")
output_vector = train16$num_tax_total
bst <- xgboost(data = sparse_matrix, label = output_vector, max.depth = 4,
eta = 1, nthread = 2, nrounds = 10,objective = "binary:logistic")
# featues we want to omit for the model
omit <- c('id_parcel', 'loc_latitude', 'loc_longitude', 'loc_zip', 'loc_county', 'year_built', 'num_tax_building', 'num_tax_land', 'factor')
# split the data
train16 <- p2016[train_ind,]
train16 <- train16 %>% select(-omit)
test16 <- p2016[-train_ind, ]
test16 <- test16 %>% select(-omit)
sparse_matrix <- sparse.model.matrix(num_tax_total~.-1, data = train16)
head(sparse_matrix)
output_vector = train16$num_tax_total
bst <- xgboost(data = sparse_matrix, label = output_vector, max.depth = 4,
eta = 1, nthread = 2, nrounds = 10,objective = "binary:logistic")
sparse_matrix <- sparse.model.matrix(num_tax_total~., data = train16)
head(sparse_matrix)
sparse_matrix <- sparse.model.matrix(num_tax_total~.-1, data = train16)
head(sparse_matrix)
output_vector = train16$num_tax_total
bst <- xgboost(data = sparse_matrix, label = output_vector, max.depth = 4,
eta = 1, nthread = 2, nrounds = 10,objective = "binary:logistic")
bst <- xgboost(data = train, label = output_vector, max.depth = 4,
eta = 1, nthread = 2, nrounds = 10,objective = "binary:logistic")
bst <- xgboost(data = train16, label = output_vector, max.depth = 4,
eta = 1, nthread = 2, nrounds = 10,objective = "binary:logistic")
test16 <- as.matrix(test16) %>% select(-omit)
test16 <- as.matrix(test16)
train16 <- as.matrix(train16)
bst <- xgboost(data = train16, label = output_vector, max.depth = 4,
eta = 1, nthread = 2, nrounds = 10,objective = "binary:logistic")
xgb.DMatrix(data = train16)
train16 <- xgb.DMatrix(data = train16)
train16 <- xgb.DMatrix(data = train16, label = train16$num_tax_total)
train16 <- xgb.DMatrix(data = train16, label = as.matrix(train16$num_tax_total))
xgboost(data = train16,
booster = "gbtree",
objective = "binary:logistic",
max.depth = 5,
eta = 0.5,
nthread = 2,
nround = 2,
min_child_weight = 1,
subsample = 0.5,
colsample_bytree = 1,
num_parallel_tree = 1)
dtrain <- xgb.DMatrix(data = train16, label= train16$num_tax_total)
xgb.DMatrix()
?xgb.DMatrix
dtrain <- xgb.DMatrix(data = train16, label= train16$num_tax_total)
dtrain <- xgb.DMatrix(data = train16, label= as.matrix(train16$num_tax_total))
dtrain <- xgb.DMatrix(data = train16)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(quanteda)
library(readtext)
library(ggplot2)
library(here)
library(quanteda.dictionaries)
library(quanteda.corpora)
library(quanteda.tidy)
library(readr)
library(sentimentr)
library(tidyverse)
library(base)
rm(list=ls())
# load data
buffett <- readtext('./L2/buffett', #filepath of the source documents
docvarsfrom = "filenames", #get information to fill df from filenames
docvarnames = c("author", # column names
"year"),
dvsep = "_") # separator used in filenames
paste0("range: ", min(buffett$year), " to ", max(buffett$year), " | years: ", length(buffett$year))
buffett
buffett_corpus <- corpus(buffett)
summary(buffett_corpus)
